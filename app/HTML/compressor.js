const fileInput = document.getElementById("file");
const fileBtn = document.getElementById("file-btn");
const sendBtn = document.getElementById("send-btn");
const textArea = document.getElementById("text");
const output = document.getElementById("output");

// –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const assistantMsg = document.createElement("div");
assistantMsg.className = "assistant-message";
assistantMsg.textContent = "–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî —è –ø–µ—Ä–µ—Å–∫–∞–∂—É —Ç–µ–±–µ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚ú®";
output.appendChild(assistantMsg);

// –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
fileBtn.onclick = () => fileInput.click();

// –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
fileInput.addEventListener("change", async () => {
  if (fileInput.files.length === 0) return;
  const file = fileInput.files[0];

  const userMsg = document.createElement("div");
  userMsg.className = "user-msg";
  userMsg.textContent = "üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: " + file.name;
  output.appendChild(userMsg);
  output.scrollTop = output.scrollHeight;

  await sendToServer(file);
});

// —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
sendBtn.addEventListener("click", async () => {
  const text = textArea.value.trim();
  if (!text) return;
  const userMsg = document.createElement("div");
  userMsg.className = "user-msg";
  userMsg.textContent = text;
  output.appendChild(userMsg);
  output.scrollTop = output.scrollHeight;

  textArea.value = "";
  sendBtn.classList.remove("active");

  await sendToServer(null, text);
});

// –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
textArea.addEventListener("input", () => {
  sendBtn.classList.toggle("active", textArea.value.trim().length > 0);
});

async function sendToServer(file = null, text = "") {
  const botMsg = document.createElement("div");
  botMsg.className = "bot-msg";
  output.appendChild(botMsg);
  output.scrollTop = output.scrollHeight;

  const formData = new FormData();
  formData.append("filename", "summary");
  if (file) formData.append("file", file);
  if (text) formData.append("text", text);

  try {
    const res = await fetch("/api/compress", { method: "POST", body: formData });
    const data = await res.json();

    if (data.summary) {
      botMsg.textContent = "";

      // —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∏"
      for (const line of data.summary) {
        for (let i = 0; i < line.length; i++) {
          botMsg.textContent += line[i];
          await new Promise(r => setTimeout(r, 12));
          output.scrollTop = output.scrollHeight;
        }
        botMsg.innerHTML += "<br><br>";
      }

      // –∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
      if (data.file) {
        const saveBtn = document.createElement("button");
        saveBtn.textContent = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DOCX";
        saveBtn.style.cssText = `
          margin-top: 8px;
          background: #2e82ff;
          border: none;
          color: white;
          padding: 8px 14px;
          border-radius: 8px;
          cursor: pointer;
          font-size: 14px;
        `;
        saveBtn.onclick = () => {
          window.location.href = "/api/download/" + data.file.split("/").pop();
        };
        botMsg.appendChild(saveBtn);
      }
    } else {
      botMsg.textContent = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.";
    }
  } catch (e) {
    botMsg.textContent = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.";
  }

  fileInput.value = "";
}
