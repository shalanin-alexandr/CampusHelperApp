from excel_scraper import get_excel_schedule, split_time_interval
import doc_scraper as ds
from doc_scraper import (
    get_docx_schedule,
    get_available_replacement_days,
    fetch_latest_docx_url,
    has_docx_url_changed
)
from datetime import datetime, timedelta
from collections import OrderedDict
import json
import os
import re

weekday_map_eng_to_rus = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

def normalize_day(day):
    return day.strip().lower().replace("—ë", "–µ") if isinstance(day, str) else ""

def normalize_pair(pair):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã –∫ –±–∞–∑–æ–≤–æ–º—É —á–∏—Å–ª—É:
    '4' -> '4', '4/1' -> '4', '4–ª—Ä' -> '4', '4.1' -> '4'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ None.
    """
    if not pair:
        return None
    s = str(pair)
    m = re.search(r'(\d+)', s)
    return m.group(1) if m else None

def parse_pair_for_sort(pair):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (base:int, sub:int) –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
    '4' -> (4,0), '4/1' -> (4,1), '4/2'->(4,2), –∏–Ω–∞—á–µ big.
    """
    if not pair:
        return (9999, 9999)
    s = str(pair)
    m = re.match(r'\s*(\d+)(?:\s*/\s*(\d+))?', s)
    if m:
        base = int(m.group(1))
        sub = int(m.group(2)) if m.group(2) else 0
        return (base, sub)
    # fallback: try to find first number
    m2 = re.search(r'(\d+)', s)
    if m2:
        return (int(m2.group(1)), 0)
    return (9999, 9999)

def is_pair_match(excel_pair, doc_pair):
    """
    –ì–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä:
    - '4' == '4/1' == '4/2' == '4–ª—Ä' (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É)
    - '4/1' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '4' –∏ '4/1'
    """
    if not excel_pair or not doc_pair:
        return False
    ex = normalize_pair(excel_pair)
    dc = normalize_pair(doc_pair)
    return (ex is not None and dc is not None and ex == dc)

def get_docx_schedule_from_doc(doc, group_name):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç Document (python-docx) –∏ –ø–∞—Ä—Å–∏—Ç
    —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç get_docx_schedule –≤–Ω—É—Ç—Ä–∏ doc_scraper.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback, –µ—Å–ª–∏ –º—ã –∏–º–µ–µ–º –ø—Ä—è–º–æ–π URL –∫ .docx.
    """
    try:
        full_schedule = {"group": group_name, "schedule": []}
        week_type = ds.get_week_type_from_docx(doc)
        full_schedule["week_type"] = week_type

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –∏–∑ –∞–±–∑–∞—Ü–µ–≤
        day_labels = []
        for para in doc.paragraphs:
            text = para.text.strip().upper()
            match = re.search(r'(–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö|–í–¢–û–†–ù–ò–ö|–°–†–ï–î–ê|–ß–ï–¢–í–ï–†–ì|–ü–Ø–¢–ù–ò–¶–ê|–°–£–ë–ë–û–¢–ê|–í–û–°–ö–†–ï–°–ï–ù–ò–ï|–í–û–°–ö–†–ï–°–ï–ù–¨–ï)', text)
            if match:
                day_labels.append(match.group(1).capitalize())

        # –ü—Ä–∏–≤—è–∑–∫–∞ –¥–Ω–µ–π –∫ —Ç–∞–±–ª–∏—Ü–∞–º
        for i, table in enumerate(doc.tables):
            if i < len(day_labels):
                day_label = day_labels[i]
            else:
                # —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–±–æ—Ä –¥–Ω—è ‚Äî –∑–∞–≤—Ç—Ä–∞ (–µ—Å–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ-—Å—É–±–±–æ—Ç–∞)
                target_day = datetime.now() + timedelta(days=1)
                if target_day.weekday() == 6:
                    target_day += timedelta(days=1)
                day_label = weekday_map_eng_to_rus[target_day.weekday()]

            result = ds.parse_schedule_table(table, group_name, day_label)
            full_schedule["schedule"].extend(result["schedule"])

        if full_schedule["schedule"]:
            return full_schedule
        else:
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç)
            return full_schedule

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ docx-–¥–æ–∫—É–º–µ–Ω—Ç–∞:", e)
        return None

def merge_schedules(excel_data, doc_data):
    merged = {
        "group": excel_data.get("group"),
        "schedule": []
    }

    replacements = doc_data.get("schedule", []) if doc_data else []
    week_type = doc_data.get("week_type") if doc_data else None

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ Excel
    for lesson in excel_data.get("schedule", []):
        pair_number = str(lesson.get("pair")).strip() if lesson.get("pair") else None
        day = lesson.get("day", "").strip()
        room = lesson.get("room", "")
        subject = lesson.get("subject", "")
        lesson_week_type = lesson.get("week_type")
        duration = lesson.get("duration")

        # week_type filtering (–∫–∞–∫ –±—ã–ª–æ)
        if lesson_week_type and week_type and lesson_week_type != week_type:
            continue
        if duration == 1 and lesson_week_type == "upper" and week_type == "lower":
            continue

        replacement = next(
            (r for r in replacements
             if is_pair_match(pair_number, r.get("pair"))
             and normalize_day(r.get("day")) == normalize_day(day)),
            None
        )

        display_pair = pair_number
        time = lesson.get("time") if "/" in str(pair_number) else lesson.get("raw_time")

        if replacement and "to" in replacement:
            merged["schedule"].append({
                "day": day,
                "time": time,
                "pair": replacement.get("pair", display_pair),
                "room": replacement.get("room", room),
                "subject": replacement["to"].get("subject") or subject,
                "replaced_subject": subject
            })
        else:
            merged["schedule"].append({
                "day": day,
                "time": time,
                "pair": display_pair,
                "room": room,
                "subject": subject
            })

    # –°–æ–±–∏—Ä–∞–µ–º set –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ Excel (–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è)
    excel_base_pairs = set(
        (normalize_day(l.get("day")), normalize_pair(l.get("pair")))
        for l in excel_data.get("schedule", []) if l.get("pair")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ Excel (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã)
    for r in replacements:
        if "pair" in r and "to" in r and r.get("day"):
            base_key = (normalize_day(r["day"]), normalize_pair(r["pair"]))
            # –µ—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –ø–∞—Ä–∞ —É–∂–µ –µ—Å—Ç—å –≤ Excel ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
            if base_key in excel_base_pairs:
                continue

            time = None
            # –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "4/1" ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            if "/" in str(r["pair"]):
                base_pair = str(r["pair"]).split("/")[0]
                try:
                    index = int(str(r["pair"]).split("/")[1])
                except:
                    index = None

                excel_time = next(
                    (l.get("raw_time") for l in excel_data.get("schedule", [])
                     if str(l.get("pair", "")).startswith(base_pair)
                     and normalize_day(l.get("day")) == normalize_day(r["day"])
                     and l.get("raw_time")),
                    None
                )
                if excel_time and index in (1,2):
                    first, second = split_time_interval(excel_time)
                    time = first if index == 1 else second
            else:
                # –∏—â–µ–º –≤—Ä–µ–º—è –ø–æ –±–∞–∑–æ–≤–æ–π –ø–∞—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                time = next(
                    (l.get("raw_time") for l in excel_data.get("schedule", [])
                     if normalize_pair(l.get("pair")) == normalize_pair(r["pair"])
                     and normalize_day(l.get("day")) == normalize_day(r["day"])
                     and l.get("raw_time")),
                    None
                )

            merged["schedule"].append({
                "day": r["day"],
                "time": time,
                "pair": r["pair"],
                "room": r.get("room", ""),
                "subject": r["to"].get("subject", ""),
                "replaced_subject": None
            })
        if "comment" in r:
            merged["schedule"].append({"comment": r["comment"]})

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–µ (1,2,3,4/1,4/2,...)
    merged["schedule"] = sorted(
        merged["schedule"],
        key=lambda item: parse_pair_for_sort(item.get("pair"))
    )

    return merged


# ------------------ main (—Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫) ------------------
if __name__ == '__main__':
    EXCEL_URL = "http://www.bobruisk.belstu.by/uploads/b1/s/8/648/basic/117/614/Raspisanie_uchebnyih_zanyatiy_na_2025-2026_uch.god_1_semestr.xlsx?t=1756801696"
    DOC_PAGE_URL = "http://www.bobruisk.belstu.by/dnevnoe-otdelenie/raspisanie-zanyatiy-i-zvonkov-zamenyi"
    MY_GROUP = "–†–°02-23"

    # –ü–æ–ª—É—á–∞–µ–º Excel-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    excel_schedule = get_excel_schedule(EXCEL_URL, MY_GROUP)

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å DOCX (–æ–±—ã—á–Ω—ã–π –ø—É—Ç—å)
    DOCX_URL = fetch_latest_docx_url(DOC_PAGE_URL)
    doc_schedule = None
    doc_updated = False

    if DOCX_URL:
        doc_updated = has_docx_url_changed(DOCX_URL)
        print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—ã: {doc_updated}")
        temp_doc_schedule = get_docx_schedule(MY_GROUP, DOC_PAGE_URL)
        if temp_doc_schedule:
            doc_schedule = temp_doc_schedule
        else:
            print("‚ùå doc_scraper –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    else:
        # fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å DOCX –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤ –∫—ç—à–µ
        try:
            cache_path = ds.CACHE_FILE
            if os.path.exists(cache_path):
                with open(cache_path, "r", encoding="utf-8") as f:
                    last_url = f.read().strip()
                if last_url:
                    print("‚ö†Ô∏è fetch_latest_docx_url –≤–µ—Ä–Ω—É–ª None ‚Äî –ø—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–µ:", last_url)
                    try:
                        doc = ds.load_docx_from_url(last_url)
                        temp_doc_schedule = get_docx_schedule_from_doc(doc, MY_GROUP)
                        if temp_doc_schedule:
                            doc_schedule = temp_doc_schedule
                    except Exception as e:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ DOCX –ø–æ –∫–µ—à—É:", e)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–µ—à-—Ñ–∞–π–ª–∞:", e)

    if not excel_schedule:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        exit()

    now = datetime.now()
    today_rus = weekday_map_eng_to_rus[now.strftime("%A")]

    if doc_schedule and doc_schedule.get("schedule"):
        all_days = get_available_replacement_days(doc_schedule)
        sorted_days = sorted(all_days, key=lambda d: 0 if normalize_day(d) == "—Å—É–±–±–æ—Ç–∞'".replace("'", "") else 1)
        if today_rus == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            sorted_days = [d for d in sorted_days if normalize_day(d) != "—Å—É–±–±–æ—Ç–∞"]
    else:
        tomorrow = now + timedelta(days=1)
        if tomorrow.weekday() == 6:
            tomorrow += timedelta(days=1)
        tomorrow_rus = weekday_map_eng_to_rus[tomorrow.strftime("%A")]
        sorted_days = ["–°—É–±–±–æ—Ç–∞", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"] if today_rus == "–°—É–±–±–æ—Ç–∞" else [tomorrow_rus]

    print(f"\nüìé –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—ã: {DOCX_URL}")
    print(f"üîç –ó–∞–º–µ–Ω—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: {doc_updated}")
    print(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today_rus}")
    print(f"üéØ –¶–µ–ª–µ–≤—ã–µ –¥–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {sorted_days}")

    schedule_by_day = OrderedDict()

    for target_day in sorted_days:
        target_day_norm = normalize_day(target_day)
        filtered_excel = {
            "group": excel_schedule["group"],
            "schedule": [
                p for p in excel_schedule["schedule"]
                if normalize_day(p.get("day")) == target_day_norm
            ]
        }

        filtered_doc = {
            "group": doc_schedule["group"] if doc_schedule else MY_GROUP,
            "schedule": [
                p for p in (doc_schedule.get("schedule", []) if doc_schedule else [])
                if normalize_day(p.get("day")) == target_day_norm
            ]
        }

        final_schedule = merge_schedules(filtered_excel, filtered_doc)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ –ø–∞—Ä–µ —á—Ç–æ–±—ã 4/1 –∏ 4/2 —à–ª–∏ —Ä—è–¥–æ–º
        final_schedule["schedule"] = sorted(
            final_schedule["schedule"],
            key=lambda item: parse_pair_for_sort(item.get("pair"))
        )

        schedule_by_day[target_day] = final_schedule["schedule"]

    for day, schedule in schedule_by_day.items():
        print(f"\nüìÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:")
        print(json.dumps(schedule, indent=4, ensure_ascii=False))
