from fastapi import FastAPI, Request, Form, UploadFile, Depends
from fastapi.responses import RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pathlib import Path
from datetime import datetime, timedelta
from collections import OrderedDict
import os, sys

from sqlalchemy.orm import Session

# üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ë–î –∏ –º–æ–¥–µ–ª–∏
from app.database import SessionLocal, engine
from app import models
from app.models import User

# üì¶ –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).resolve().parent / "schedule"))
from app.schedule.excel_scraper import get_excel_schedule
from app.schedule.doc_scraper import (
    has_docx_url_changed,
    fetch_latest_docx_url,
    get_docx_schedule,
    get_available_replacement_days
)
from app.schedule.schedule_merger import merge_schedules, normalize_day
from app.grades.calculator import GradeTracker
from app.sumarizer.compressor import summarize_text, read_txt, read_docx, save_docx
from app.notes import notes as notes_service

# üìÅ –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_DIR = Path(__file__).resolve().parent
HTML_DIR = BASE_DIR / "HTML"

app = FastAPI(debug=True)
models.Base.metadata.create_all(bind=engine)

# üìÅ –°—Ç–∞—Ç–∏–∫–∞ –∏ —à–∞–±–ª–æ–Ω—ã
app.mount("/static", StaticFiles(directory=BASE_DIR / "static"), name="static")
app.mount("/html-static", StaticFiles(directory=HTML_DIR), name="html-static")
templates = Jinja2Templates(directory=HTML_DIR)

tracker = GradeTracker()


# üìå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /admin-login
@app.get("/")
async def index():
    return RedirectResponse("/admin-login")


# üìå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_current_user(db: Session):
    """
    –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=1.
    –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Å–µ—Å—Å–∏–∏ / —Ç–æ–∫–µ–Ω—É.
    """
    return db.query(User).filter(User.id == 1).first()


# üìÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@app.get("/schedule")
async def schedule_page(request: Request, db: Session = Depends(get_db)):
    EXCEL_URL = "http://www.bobruisk.belstu.by/uploads/b1/s/8/648/basic/117/614/Raspisanie_uchebnyih_zanyatiy_na_2025-2026_uch.god_1_semestr.xlsx?t=1756801696"
    DOC_PAGE_URL = "http://www.bobruisk.belstu.by/dnevnoe-otdelenie/raspisanie-zanyatiy-i-zvonkov-zamenyi"

    # üß† –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ user_id = 1)
    user = get_current_user(db)
    # user.group –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "2 –∫—É—Ä—Å, –†–°02-24" ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if user and user.group:
        # –∑–∞—â–∏—Ç–Ω–æ: –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        MY_GROUP = user.group.split(",")[-1].strip()
    else:
        MY_GROUP = "–†–°02-24"  # fallback

    weekday_map_eng_to_rus = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    excel_schedule = get_excel_schedule(EXCEL_URL, MY_GROUP)
    if not excel_schedule or not excel_schedule.get("schedule"):
        return templates.TemplateResponse("schedule.html", {
            "request": request,
            "schedule_by_day": {
                "–û—à–∏–±–∫–∞": [{"comment": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {MY_GROUP}."}]
            }
        })

    DOCX_URL = None
    doc_schedule = {"group": MY_GROUP, "schedule": []}
    doc_updated_status = False

    try:
        DOCX_URL = fetch_latest_docx_url(DOC_PAGE_URL)
    except Exception as e:
        # –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ DOCX:", e)
        DOCX_URL = None

    if DOCX_URL:
        try:
            doc_updated_status = has_docx_url_changed(DOCX_URL)
            temp_doc_schedule = get_docx_schedule(MY_GROUP, DOC_PAGE_URL, doc_updated_status)
            if temp_doc_schedule and temp_doc_schedule.get("schedule") is not None:
                doc_schedule = temp_doc_schedule
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ DOCX:", e)
            doc_schedule = {"group": MY_GROUP, "schedule": []}

    now = datetime.now()
    today_rus = weekday_map_eng_to_rus[now.strftime("%A")]
    tomorrow = now + timedelta(days=1)
    if tomorrow.weekday() == 6:
        tomorrow += timedelta(days=1)
    tomorrow_rus = weekday_map_eng_to_rus[tomorrow.strftime("%A")]

    if doc_schedule.get("schedule"):
        all_days = get_available_replacement_days(doc_schedule)
        sorted_days = sorted(all_days, key=lambda d: 0 if normalize_day(d) == "—Å—É–±–±–æ—Ç–∞" else 1)
        if today_rus == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            sorted_days = [d for d in sorted_days if normalize_day(d) != "—Å—É–±–±–æ—Ç–∞"]
        target_days = sorted_days
    else:
        target_days = ["–°—É–±–±–æ—Ç–∞", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"] if today_rus == "–°—É–±–±–æ—Ç–∞" else [tomorrow_rus]

    schedule_by_day = OrderedDict()
    for target_day in target_days:
        filtered = {
            "group": excel_schedule["group"],
            "schedule": [
                p for p in excel_schedule["schedule"]
                if (p.get("day") or "").strip().lower() == target_day.strip().lower()
            ]
        }

        doc_schedule_for_target_day = {
            "group": doc_schedule.get("group", MY_GROUP),
            "schedule": [
                p for p in doc_schedule.get("schedule", [])
                if (p.get("day") or "").strip().lower() == target_day.strip().lower()
            ]
        }

        final_schedule = merge_schedules(filtered, doc_schedule_for_target_day)
        schedule_by_day[target_day] = final_schedule.get("schedule", [])

    if not any(schedule_by_day.values()):
        schedule_by_day = {
            ", ".join(target_days): [{"comment": f"–ù–µ—Ç –ø–∞—Ä –Ω–∞ {', '.join(target_days)}."}]
        }

    return templates.TemplateResponse("schedule.html", {
        "request": request,
        "schedule_by_day": schedule_by_day,
        "group": MY_GROUP
    })


# üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è HTML —Ñ–∞–π–ª–æ–≤
for html_file in HTML_DIR.glob("*.html"):
    route_name = "/" + html_file.stem

    async def _page(request: Request, file=html_file.name):
        return templates.TemplateResponse(file, {"request": request})

    app.get(route_name)(_page)


@app.get("/pomodoro")
async def pomodoro_page(request: Request):
    return templates.TemplateResponse("pomodoro.html", {"request": request})

@app.get("/student")
async def student_page(request: Request):
    return templates.TemplateResponse("student-home.html", {"request": request})


# üìù API –∑–∞–º–µ—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥ JS)
@app.get("/api/notes")
async def api_get_notes(db: Session = Depends(get_db)):
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id = 1; –≤ –±—É–¥—É—â–µ–º –±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_current_user(db)
    if not user:
        return JSONResponse({"error": "not authenticated"}, status_code=401)
    user_id = user.id

    notes = notes_service.get_all_notes(db, user_id)
    return [
        {
            "id": n.id,
            "title": (n.text or "").split("\n")[0][:255],
            "text": n.text,
            "icon": n.icon or "üìù",
            "datetime": n.note_datetime,
            "done": n.done,
            "created_at": n.created_at.isoformat()
        }
        for n in notes
    ]


@app.post("/api/notes/create")
async def api_create_note(data: dict, db: Session = Depends(get_db)):
    user = get_current_user(db)
    if not user:
        return JSONResponse({"error": "not authenticated"}, status_code=401)
    user_id = user.id

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ text (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç) —Ç–∞–∫ –∏ title+text
    title = data.get("title")
    text_field = data.get("text") or ""
    if title:
        text = f"{title}\n{text_field}"
    else:
        text = text_field or "(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

    note = notes_service.create_note(db, user_id, text=text, datetime_str=data.get("datetime"), repeat=data.get("repeat", "none"))
    return {"status": "created", "id": note.id}


@app.post("/api/notes/update/{note_id}")
async def api_update_note(note_id: int, data: dict, db: Session = Depends(get_db)):
    user = get_current_user(db)
    if not user:
        return JSONResponse({"error": "not authenticated"}, status_code=401)
    user_id = user.id

    text_field = data.get("text") or ""
    title = data.get("title")
    if title:
        text = f"{title}\n{text_field}"
    else:
        text = text_field or "(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

    note = db.query(models.Note).filter(models.Note.id == note_id, models.Note.user_id == user_id).first()
    if not note:
        return {"status": "not_found"}
    note.text = text
    note.icon = data.get("icon", note.icon)
    note.note_datetime = data.get("datetime", note.note_datetime)
    db.commit()
    return {"status": "updated"}


@app.post("/api/notes/delete/{note_id}")
async def api_delete_note(note_id: int, db: Session = Depends(get_db)):
    user = get_current_user(db)
    if not user:
        return JSONResponse({"error": "not authenticated"}, status_code=401)
    user_id = user.id

    ok = notes_service.delete_note(db, note_id, user_id)
    return {"status": "deleted" if ok else "not_found"}


@app.post("/api/notes/done/{note_id}")
async def api_mark_done(note_id: int, db: Session = Depends(get_db)):
    user = get_current_user(db)
    if not user:
        return JSONResponse({"error": "not authenticated"}, status_code=401)
    user_id = user.id

    ok = notes_service.mark_note_as_done(db, note_id, user_id)
    return {"status": "done" if ok else "not_found"}


# üìä API –æ—Ü–µ–Ω–æ–∫
@app.get("/api/grades")
async def get_grades():
    return {
        "grades": tracker.grades,
        "average": tracker.get_average(),
        "count": tracker.get_count()
    }

@app.get("/api/grades/add/{value}")
async def add_grade(value: int):
    tracker.add_grade(value)
    return get_grades()

@app.get("/api/grades/remove")
async def remove_grade():
    tracker.remove_last()
    return get_grades()


# üìÑ –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä
@app.get("/compressor")
async def compressor_page(request: Request):
    return templates.TemplateResponse("compressor.html", {"request": request})


@app.post("/api/compress")
async def compress(text: str = Form(None), filename: str = Form(...), file: UploadFile = None):
    if file:
        ext = file.filename.lower().split('.')[-1]
        content = await file.read()
        path = BASE_DIR / f"temp_upload.{ext}"
        with open(path, "wb") as f:
            f.write(content)

        if ext == "txt":
            text = read_txt(path)
        elif ext == "docx":
            text = read_docx(path)
        else:
            return JSONResponse({"error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"}, status_code=400)

        os.remove(path)

    if not text or not text.strip():
        return JSONResponse({"error": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"}, status_code=400)

    summary = summarize_text(text)
    saved_path = save_docx(summary, filename)
    return {"summary": summary, "file": str(saved_path)}


# üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@app.post("/api/register")
async def register_user(data: dict, db: Session = Depends(get_db)):
    first_name = data.get("firstName")
    last_name = data.get("lastName")
    course = data.get("course")
    group = data.get("group")

    if not all([first_name, last_name, course, group]):
        return JSONResponse({"error": "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}, status_code=400)

    username = f"{first_name} {last_name}"

    existing = db.query(User).filter(User.username == username).first()
    if existing:
        return {"status": "exists", "id": existing.id}

    new_user = User(
        username=username,
        password_hash="local",  # –≤—Ä–µ–º–µ–Ω–Ω–æ
        group=f"{course} –∫—É—Ä—Å, {group}"
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    print(f"[REGISTER] {username} ({course} –∫—É—Ä—Å, {group})")
    return {"status": "ok", "id": new_user.id}
